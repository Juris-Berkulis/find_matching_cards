const path = require('path')
const HTMLWebpackPlugin = require('html-webpack-plugin')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const OptimizeCssAssetWebpackPlugin = require('optimize-css-assets-webpack-plugin')
const TerserWebpackPlugin = require('terser-webpack-plugin')
const FaviconsWebpackPlugin = require('favicons-webpack-plugin')
const CopyPlugin = require("copy-webpack-plugin")

//* Если переменная среды ровна 'development', то мы находимся в режиме разработки, а иначе - в режиме продакшн:
const isDev = process.env.NODE_ENV === 'development';
const isProd = !isDev;
console.log(`========== РЕЖИМ: ${process.env.NODE_ENV && typeof(process.env.NODE_ENV) === 'string' ? process.env.NODE_ENV.toUpperCase() : 'НЕИЗВЕСТНО'} ==========`);

const optimization = () => {
    const config = {
        splitChunks: {
            chunks: 'all'
        }
    };

    if (isProd) {
        config.minimizer = [
            new OptimizeCssAssetWebpackPlugin(),
            new TerserWebpackPlugin()
        ];
    }

    return config
};

const getFilename = (fileExtension) => {
    return isDev ? `[name].${fileExtension}` : `[name].[hash].${fileExtension}`
};

const cssLoaders = (cssLoader) => {
    const cssLoadersList = [
        {
            loader: MiniCssExtractPlugin.loader,
            options: {},
        }, 
        'css-loader',
        "postcss-loader"
    ];

    if (cssLoader) {
        cssLoadersList.push(cssLoader);
    }

    return cssLoadersList
};

const faviconsConfig = {
    // Your source logo (required)
    logo: './favicon/logo.png',
    // Your maskable source logo (optional)
    //? logoMaskable: './src/logo-maskable.png',
    mode: 'webapp', // optional can be 'webapp', 'light' or 'auto' - 'auto' by default
    devMode: 'webapp', // optional can be 'webapp' or 'light' - 'light' by default 
    // Allow caching the assets across webpack builds. By default this will use
    // webpack's cache configuration, but can be set to false to disable caching.
    // Note: disabling caching may increase build times considerably.
    // For more information, see: https://webpack.js.org/configuration/cache/
    cache: true,
    // Override the publicPath option usually read from webpack configuration
    //? publicPath: '/static',
    // The directory to output the assets relative to the webpack output dir.
    // Relative string paths are allowed here ie '../public/static'. If this
    // option is not set, `prefix` is used.
    //? outputPath: '/public/static',
    // Prefix path for generated assets
    prefix: 'assets/',
    // Inject html links/metadata (requires html-webpack-plugin).
    // This option accepts arguments of different types:
    //  * boolean
    //    `false`: disables injection
    //    `true`: enables injection if that is not disabled in html-webpack-plugin
    //  * function
    //    any predicate that takes an instance of html-webpack-plugin and returns either
    //    `true` or `false` to control the injection of html metadata for the html files
    //    generated by this instance.
    inject: true,

    // Favicons configuration options (see below)
    favicons: {
        //? path: "/", // Path for overriding default icons path. `string`
        appName: 'Findmards', // Your application's name. `string`
        appShortName: 'Findmards', // Your application's short_name. `string`. Optional. If not set, appName will be used
        appDescription: 'Игра для тренировки памяти', // Your application's description. `string`
        developerName: 'Беркуль Юрий Эдуардович', // Your (or your developer's) name. `string`
        developerURL: null, // Your (or your developer's) URL. `string`
        dir: "auto", // Primary text direction for name, short_name, and description
        lang: "ru-RU", // Primary language for name and short_name
        background: "#cccccc", // Background colour for flattened icons. `string`
        theme_color: "#cccccc", // Theme color user for example in Android's task switcher. `string`
        appleStatusBarStyle: "black-translucent", // Style for Apple status bar: "black-translucent", "default", "black". `string`
        display: "standalone", // Preferred display mode: "fullscreen", "standalone", "minimal-ui" or "browser". `string`
        orientation: "any", // Default orientation: "any", "natural", "portrait" or "landscape". `string`
        //? scope: "/", // set of URLs that the browser considers within your app
        //? start_url: "/?homescreen=1", // Start URL when launching the application from a device. `string`
        preferRelatedApplications: true, // Should the browser prompt the user to install the native companion app. `boolean`
        //? relatedApplications: undefined, // Information about the native companion apps. This will only be used if `preferRelatedApplications` is `true`. `Array<{ id: string, url: string, platform: string }>`
        version: "1.0", // Your application's version string. `string`
        //? pixel_art: false, // Keeps pixels "sharp" when scaling up, for pixel art.  Only supported in offline mode.
        loadManifestWithCredentials: false, // Browsers don't send cookies when fetching a manifest, enable this to fix that. `boolean`
        manifestMaskable: true, // Maskable source image(s) for manifest.json. "true" to use default source. More information at https://web.dev/maskable-icon/. `boolean`, `string`, `buffer` or array of `string`
        icons: {
            // Platform Options:
            // - offset - offset in percentage
            // - background:
            //   * false - use default
            //   * true - force use default, e.g. set background for Android icons
            //   * color - set background for the specified icons
            //
            android: true, // Create Android homescreen icon. `boolean` or `{ offset, background }` or an array of sources
            appleIcon: true, // Create Apple touch icons. `boolean` or `{ offset, background }` or an array of sources
            appleStartup: true, // Create Apple startup images. `boolean` or `{ offset, background }` or an array of sources
            favicons: true, // Create regular favicons. `boolean` or `{ offset, background }` or an array of sources
            windows: true, // Create Windows 8 tile icons. `boolean` or `{ offset, background }` or an array of sources
            yandex: true, // Create Yandex browser icon. `boolean` or `{ offset, background }` or an array of sources
        },
        //? shortcuts: [
            // Your applications's Shortcuts (see: https://developer.mozilla.org/docs/Web/Manifest/shortcuts)
            // Array of shortcut objects:
        //     {
        //?         name: "View your Inbox", // The name of the shortcut. `string`
        //?         short_name: "inbox", // optionally, falls back to name. `string`
        //?         description: "View your inbox messages", // optionally, not used in any implemention yet. `string`
        //?         url: "/inbox", // The URL this shortcut should lead to. `string`
        //?         icon: "test/inbox_shortcut.png", // source image(s) for that shortcut. `string`, `buffer` or array of `string`
        //     },
            // more shortcuts objects
        // ],
    }
};

module.exports = {
    context: path.resolve(__dirname, 'src'),
    mode: 'development',
    entry: {
        main: './js/main.js'
    },
    output: {
        filename: getFilename('js'),
        path: path.resolve(__dirname, 'dist')
    },
    resolve: {
        extensions: [
            '.js', 
            'json',
        ],
    },
    optimization: optimization(),
    devServer: {
        port: 4200,
        hot: isDev
    },
    devtool: isDev ? 'source-map' : 'eval',
    plugins: [
        new HTMLWebpackPlugin({
            template: './index.html',
            minify: {
                collapseWhitespace: isProd
            }
        }),
        new CleanWebpackPlugin(),
        new MiniCssExtractPlugin({
            filename: getFilename('css')
        }),
        new FaviconsWebpackPlugin(faviconsConfig),
        new CopyPlugin({
            patterns: [
                {
                    from: '../public', 
                    to: '../dist'
                },
            ],
        }),
    ],
    module: {
        rules: [
            {
                test: /\.css$/i,
                use: cssLoaders(),
            },
            {
                test: /\.s[ac]ss$/i,
                use: cssLoaders('sass-loader'),
            },
            {
                test: /\.(png|jpeg|jpg|svg|gif)$/i,
                use: ['file-loader']
            },
            {
                test: /\.m?js$/i,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: [
                            '@babel/preset-env'
                        ]
                    }
                }
            }
        ]
    }
}
